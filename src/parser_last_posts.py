import asyncio
import aiohttp
from telethon import TelegramClient
from telethon.tl.functions.messages import GetHistoryRequest
import config
import re
from datetime import datetime, timedelta


class ChannelMonitor:
    def __init__(self):
        self.last_checked_id = 0
        self.processed_ids = set()
        self.client = None
        self.output_channel = None
        self.message_store = {}
        self.article_timeouts = {}
        self.pending_responses = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

    async def initialize(self):
        self.client = TelegramClient('new_user_session', config.API_ID, config.API_HASH)
        await self.client.start(config.PHONE_NUMBER)

        if isinstance(config.OUTPUT_CHANNEL_ID, str):
            self.output_channel = await self.client.get_entity(config.OUTPUT_CHANNEL_ID)
        else:
            self.output_channel = await self.client.get_entity(int(config.OUTPUT_CHANNEL_ID))

        print("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def send_to_protalk_api(self, message_text):
        url = f"https://api.pro-talk.ru/api/v1.0/ask/k7LZ7GN49P1UtvN1DJX4qYesMXml82Ij"
        headers = {'Content-Type': 'application/json'}
        payload = {
            "bot_id": 25815,
            "chat_id": "channel_monitor",
            "message": message_text
        }

        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ API: {message_text[:50]}...")

        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                async with session.post(url, json=payload, headers=headers) as response:
                    if response.status == 200:
                        return await response.json()
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {response.status}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {str(e)}")
        return None

    def parse_second_bot_response(self, response_text):
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞"""
        result = {
            'name': None,
            'price': None,
            'stock_quantity': None,
            'found': False
        }

        try:
            if "–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" in response_text:
                return result

            # –ò—â–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            name_match = re.search(r'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:\s*(.*)', response_text)
            if name_match:
                result['name'] = name_match.group(1).strip()

            # –ò—â–µ–º —Ü–µ–Ω—É
            price_match = re.search(r'–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É:\s*([\d.,]+)', response_text)
            if price_match:
                result['price'] = float(price_match.group(1).replace(',', '.'))
                result['found'] = True

            # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
            stock_match = re.search(r'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:\s*(\d+)', response_text)
            if stock_match:
                result['stock_quantity'] = int(stock_match.group(1))

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞: {e}")

        return result

    async def process_api_response(self, user, api_response, original_message):
        if not api_response or 'done' not in api_response:
            return

        response_text = api_response['done'].strip()
        if not response_text or response_text in ('...', '‚Ä¶'):
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª)
        lines = [line.strip() for line in response_text.split('\n') if line.strip()]

        articles_data = []

        for line in lines:
            if ':' not in line:
                continue

            try:
                article_part, quantity_part = line.split(':', 1)
                article = article_part.strip()
                quantity = quantity_part.strip().split()[0]
                quantity = float(quantity)

                articles_data.append({
                    'article': article,
                    'quantity': quantity,
                    'processed': False,
                    'found': None  # None - –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç, False - –Ω–µ –Ω–∞–π–¥–µ–Ω, True - –Ω–∞–π–¥–µ–Ω
                })

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∞—Ä—Ç–∏–∫—É–ª –æ—Ç–¥–µ–ª—å–Ω–æ –≤–æ –≤—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª
                await self.client.send_message(self.output_channel, article)
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—Ä—Ç–∏–∫—É–ª –≤–æ –≤—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª: {article}")

                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–∞
                self.article_timeouts[article] = datetime.now()
                self.pending_responses.add(article)

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ '{line}': {e}")
                continue

        if articles_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.message_store[original_message.id] = {
                'articles': articles_data,
                'original_message': original_message,
                'responses': [],  # –ó–¥–µ—Å—å –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É
                'timestamp': datetime.now()
            }

    async def handle_output_channel_response(self, response_message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞
            bot_data = self.parse_second_bot_response(response_message.message)

            # –ò—â–µ–º, –∫ –∫–∞–∫–æ–º—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç
            for msg_id, data in self.message_store.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                for article_data in data['articles']:
                    if (article_data['article'] in response_message.message and
                            not article_data['processed'] and
                            article_data['article'] in self.pending_responses):

                        # –ü–æ–º–µ—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                        article_data['processed'] = True
                        article_data['found'] = bot_data['found']

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ —ç—Ç–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É
                        if bot_data['found']:
                            data['responses'].append({
                                'article_data': article_data,
                                'bot_data': bot_data
                            })

                        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                        self.pending_responses.discard(article_data['article'])
                        if article_data['article'] in self.article_timeouts:
                            del self.article_timeouts[article_data['article']]

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω—ã –ª–∏ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
                        await self.check_complete_response(msg_id, data)
                        return

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞: {e}")

    async def check_complete_response(self, msg_id, data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∞—Ä—Ç–∏–∫—É–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –∏–ª–∏ –∏—Å—Ç–µ–∫ —Ç–∞–π–º–∞—É—Ç)
        all_processed = all(article['processed'] or
                            (article['article'] in self.article_timeouts and
                             (datetime.now() - self.article_timeouts[article['article']]) > timedelta(seconds=30))
                            for article in data['articles'])

        if all_processed:
            # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã —Å –∏—Å—Ç–µ–∫—à–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º –∫–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ
            for article in data['articles']:
                if not article['processed'] and article['article'] in self.article_timeouts:
                    if (datetime.now() - self.article_timeouts[article['article']]) > timedelta(seconds=30):
                        article['processed'] = True
                        article['found'] = False
                        self.pending_responses.discard(article['article'])
                        del self.article_timeouts[article['article']]

            await self.send_combined_response(data)
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if msg_id in self.message_store:
                del self.message_store[msg_id]

    async def send_combined_response(self, message_data):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        try:
            original_message = message_data['original_message']
            responses = message_data['responses']
            articles = message_data['articles']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞—Å—Ü–µ–Ω–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª
            has_priced_articles = any(article.get('found', False) for article in articles)
            has_unpriced_articles = any(article.get('found', False) is False for article in articles)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
            channel_entity = await self.client.get_entity(original_message.peer_id)
            post_link = f"https://t.me/c/{channel_entity.id}/{original_message.id}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            response_text = f"üìé [–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç]({post_link})\n\n"

            total_sum = 0
            total_discount_sum = 0
            found_count = 0
            not_found_articles = []

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã
            if has_priced_articles:
                response_text += "‚úÖ –†–∞—Å—Ü–µ–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∞—Ä—Ç–∏–∫—É–ª—ã:\n\n"

                for article in articles:
                    if article.get('found', False):
                        # –ò—â–µ–º –æ—Ç–≤–µ—Ç –ø–æ —ç—Ç–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É
                        response = next((r for r in responses if r['article_data']['article'] == article['article']),
                                        None)
                        if response:
                            found_count += 1
                            article_data = response['article_data']
                            bot_data = response['bot_data']

                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                            item_total = bot_data['price'] * article_data['quantity']
                            item_discount = item_total * 0.97

                            total_sum += item_total
                            total_discount_sum += item_discount

                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞ —Å–∫–ª–∞–¥–µ
                            stock_info = ""
                            if bot_data['stock_quantity'] is not None:
                                stock_info = f" ({bot_data['stock_quantity']} –Ω–∞ —Å–∫–ª–∞–¥–µ)"

                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –∞—Ä—Ç–∏–∫—É–ª–µ
                            response_text += (
                                f"üîπ –ê—Ä—Ç–∏–∫—É–ª: {article_data['article']}\n"
                                f"üè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {bot_data['name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                                f"üì¶ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {article_data['quantity']}{stock_info}\n"
                                f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {bot_data['price']:.2f}\n"
                                f"üßÆ –ò—Ç–æ–≥–æ –ø–æ –ø–æ–∑–∏—Ü–∏–∏: {item_total:.2f}\n"
                                f"üéÅ –°–æ —Å–∫–∏–¥–∫–æ–π 3%: {item_discount:.2f}\n\n"
                            )
                    elif article.get('found', False) is False:
                        not_found_articles.append(article['article'])

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Ä–∞—Å—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–∞—Ö
            if has_unpriced_articles:
                response_text += "\nüö´ –ù–µ —Ä–∞—Å—Ü–µ–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∞—Ä—Ç–∏–∫—É–ª—ã:\n"
                for article in not_found_articles:
                    response_text += f"‚Ä¢ {article}\n"
                response_text += "\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ü–µ–Ω–µ–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã
            if has_priced_articles:
                response_text += (
                    f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum:.2f}\n"
                    f"üí≥ –û–±—â–∞—è —Å—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {total_discount_sum:.2f}\n"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ
            if has_priced_articles or has_unpriced_articles:
                await self.client.send_message(
                    config.USER_ID,
                    response_text,
                    reply_to=original_message,
                    link_preview=False
                )
                print(f"‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è {len(articles)} –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
            else:
                print("‚ÑπÔ∏è –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∏ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
    async def check_timeouts(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∞–π–º–∞—É—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤"""
        while True:
            try:
                now = datetime.now()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å
                for msg_id, data in list(self.message_store.items()):
                    await self.check_complete_response(msg_id, data)

                await asyncio.sleep(5)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤: {e}")
                await asyncio.sleep(10)

    async def monitor_output_channel(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –æ—Ç–≤–µ—Ç—ã –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        print("üëÇ –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ç–æ—Ä–æ–≥–æ –∫–∞–Ω–∞–ª–∞...")
        last_id = 0

        while True:
            try:
                history = await self.client(GetHistoryRequest(
                    peer=self.output_channel,
                    limit=5,
                    offset_date=None,
                    offset_id=0,
                    max_id=0,
                    min_id=last_id,
                    add_offset=0,
                    hash=0
                ))

                if history.messages:
                    for msg in history.messages:
                        if msg.id > last_id and not msg.out:  # –¢–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                            await self.handle_output_channel_response(msg)
                            last_id = msg.id

                await asyncio.sleep(5)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ç–æ—Ä–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {e}")
                await asyncio.sleep(10)

    async def process_messages(self, user, messages):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        new_messages = [msg for msg in messages if msg.id > self.last_checked_id]

        if not new_messages:
            return

        new_messages.sort(key=lambda x: x.id)
        messages_to_process = new_messages[-10:]

        for message in messages_to_process:
            if not message.message:
                continue

            print(f"üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ID: {message.id}")

            api_response = await self.send_to_protalk_api(message.message)
            if api_response:
                await self.process_api_response(user, api_response, message)

        self.last_checked_id = max(msg.id for msg in messages_to_process)


async def main():
    monitor = ChannelMonitor()
    await monitor.initialize()

    try:
        if isinstance(config.CHANNEL_ID, str):
            input_channel = await monitor.client.get_entity(config.CHANNEL_ID)
        else:
            input_channel = await monitor.client.get_entity(int(config.CHANNEL_ID))
        print(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–Ω–∞–ª: {input_channel.title}")

        if isinstance(config.USER_ID, str):
            if config.USER_ID.startswith('@'):
                user = await monitor.client.get_entity(config.USER_ID)
            else:
                try:
                    user = await monitor.client.get_entity(int(config.USER_ID))
                except ValueError:
                    user = await monitor.client.get_entity(config.USER_ID)
        else:
            user = await monitor.client.get_entity(int(config.USER_ID))
        print(f"üë§ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        asyncio.create_task(monitor.monitor_output_channel())
        asyncio.create_task(monitor.check_timeouts())

        while True:
            try:
                history = await monitor.client(GetHistoryRequest(
                    peer=input_channel,
                    limit=100,
                    offset_date=None,
                    offset_id=0,
                    max_id=0,
                    min_id=monitor.last_checked_id,
                    add_offset=0,
                    hash=0
                ))

                if history.messages:
                    await monitor.process_messages(user, history.messages)
                else:
                    print("‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç")

                await asyncio.sleep(60)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(10)

    except Exception as e:
        print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await monitor.client.disconnect()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")