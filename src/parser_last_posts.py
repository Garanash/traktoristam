import asyncio
import aiohttp
import re
from datetime import datetime, timedelta
from collections import deque
from telethon import TelegramClient, events
from telethon.tl.functions.messages import GetHistoryRequest
import config


class ChannelMonitor:
    def __init__(self):
        self.last_checked_id = 0
        self.processed_ids = set()
        self.client = None
        self.output_channel = None
        self.private_channel = None
        self.message_queue = deque()
        self.current_message_processing = None
        self.article_timeouts = {}
        self.pending_responses = set()
        self.api_request_lock = asyncio.Lock()
        self.processing_lock = asyncio.Lock()
        self.processing_active = False

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram –∏ –∫–∞–Ω–∞–ª–æ–≤"""
        self.client = TelegramClient('session_name', config.API_ID, config.API_HASH)
        await self.client.start(config.PHONE_NUMBER)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤
            self.output_channel = await self.client.get_entity(config.OUTPUT_CHANNEL_ID)
            self.private_channel = await self.client.get_entity(config.PRIVATE_CHANNEL_ID)

            print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π (–¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            output_name = getattr(self.output_channel, 'title',
                                  getattr(self.output_channel, 'username',
                                          getattr(self.output_channel, 'first_name', 'N/A')))
            private_name = getattr(self.private_channel, 'title',
                                   getattr(self.private_channel, 'username',
                                           getattr(self.private_channel, 'first_name', 'N/A')))

            print(f"üì¢ –í—ã—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª: {output_name}")
            print(f"üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: {private_name}")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            raise

    async def extract_articles_with_perplexity(self, message_text):
        """–ó–∞–ø—Ä–æ—Å –∫ Perplexity API –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
        url = "https://api.perplexity.ai/chat/completions"
        headers = {
            "Authorization": f"Bearer {config.PERPLEXITY_API_KEY}",
            "Content-Type": "application/json"
        }

        system_prompt = """–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –∏–∑–≤–ª–µ–∫–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–∞–≤–∏–ª–∞:
1. –ù–∞–π–¥–∏ –≤—Å–µ –∞—Ä—Ç–∏–∫—É–ª—ã (–∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –¥–µ—Ñ–∏—Å–æ–≤)
2. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
3. –í—ã–≤–µ–¥–∏ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∞—Ä—Ç–∏–∫—É–ª: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
4. –¢–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!"""

        payload = {
            "model": "sonar-medium-online",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–ò–∑–≤–ª–µ–∫–∏ –∞—Ä—Ç–∏–∫—É–ª—ã:\n{message_text}"}
            ],
            "temperature": 0.1,
            "max_tokens": 1000
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                        url,
                        json=payload,
                        headers=headers,
                        timeout=aiohttp.ClientTimeout(total=30)
                ) as response:

                    if response.status == 200:
                        data = await response.json()
                        content = data['choices'][0]['message']['content']

                        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                        result = []
                        for line in content.split('\n'):
                            line = line.strip()
                            if re.match(r'^[\w\d-]+:\s*\d+$', line):
                                result.append(line)

                        return {'done': '\n'.join(result)} if result else None

                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API (—Å—Ç–∞—Ç—É—Å {response.status}): {await response.text()}")
                    return None

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Perplexity: {str(e)}")
            return None

    async def process_message_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while True:
            if self.message_queue and not self.processing_active:
                async with self.processing_lock:
                    if self.message_queue and not self.processing_active:
                        self.processing_active = True
                        message_data = self.message_queue.popleft()

                        print(f"\nüöÄ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ID: {message_data['message'].id}")

                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        processing_data = {
                            'message': message_data['message'],
                            'user': message_data['user'],
                            'articles_data': [],
                            'responses': [],
                            'timestamp': datetime.now()
                        }

                        # –ó–∞–ø—Ä–æ—Å –∫ Perplexity API
                        api_response = await self.extract_articles_with_perplexity(
                            message_data['message'].message
                        )

                        if api_response:
                            await self.process_api_response(processing_data, api_response)

                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤–æ –≤—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
                            for article in processing_data['articles_data']:
                                await self.client.send_message(
                                    self.output_channel,
                                    article['article']
                                )
                                self.article_timeouts[article['article']] = datetime.now()
                                self.pending_responses.add(article['article'])

                            self.current_message_processing = processing_data
                        else:
                            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                            self.processing_active = False

            await asyncio.sleep(1)

    async def process_api_response(self, processing_data, api_response):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
        if not api_response or 'done' not in api_response:
            return

        for line in api_response['done'].split('\n'):
            try:
                article, quantity = map(str.strip, line.split(':'))
                processing_data['articles_data'].append({
                    'article': article,
                    'quantity': float(quantity),
                    'processed': False,
                    'found': None
                })
                print(f"üîç –ù–∞–π–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª: {article} ({quantity} —à—Ç.)")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {line}")

    async def handle_output_channel_response(self, response_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ —Å —Ü–µ–Ω–∞–º–∏"""
        if not self.processing_active or not self.current_message_processing:
            return

        bot_data = self.parse_second_bot_response(response_message.message)

        for article_data in self.current_message_processing['articles_data']:
            if (article_data['article'] in response_message.message
                    and not article_data['processed']):

                article_data.update({
                    'processed': True,
                    'found': bot_data['found'],
                    'response_received': True
                })

                if bot_data['found']:
                    self.current_message_processing['responses'].append({
                        'article_data': article_data,
                        'bot_data': bot_data
                    })
                    print(f"üí∞ –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è {article_data['article']}")

                self.pending_responses.discard(article_data['article'])
                await self.check_complete_response()
                break

    def parse_second_bot_response(self, response_text):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞"""
        result = {
            'name': None,
            'price': None,
            'stock_quantity': None,
            'found': False
        }

        try:
            if "–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" not in response_text:
                if name_match := re.search(r'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:\s*(.*)', response_text):
                    result['name'] = name_match.group(1).strip()
                if price_match := re.search(r'–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É:\s*([\d.,]+)', response_text):
                    result['price'] = float(price_match.group(1).replace(',', '.'))
                    result['found'] = True
                if stock_match := re.search(r'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:\s*(\d+)', response_text):
                    result['stock_quantity'] = int(stock_match.group(1))
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

        return result

    async def check_complete_response(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
        if not self.processing_active:
            return

        timeout = timedelta(seconds=60)
        now = datetime.now()

        all_processed = all(
            article['processed'] or
            (article['article'] in self.article_timeouts and
             (now - self.article_timeouts[article['article']]) > timeout)
            for article in self.current_message_processing['articles_data']
        )

        if all_processed:
            await self.finalize_processing()

    async def finalize_processing(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        if not self.processing_active:
            return

        try:
            priced_items = [
                r for r in self.current_message_processing['responses']
                if r['article_data']['found']
            ]

            if priced_items:
                await self.send_to_private_channel()
            else:
                print("‚ÑπÔ∏è –ù–µ—Ç —Ä–∞—Å—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤")

        finally:
            self.cleanup_processing()

    async def send_to_private_channel(self):
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"""
        try:
            message_data = self.current_message_processing
            original_message = message_data['message']

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            channel_entity = await self.client.get_entity(original_message.peer_id)
            post_link = f"https://t.me/c/{channel_entity.id}/{original_message.id}"

            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            response_text = f"üìé [–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]({post_link})\n\n"
            response_text += "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤:\n\n"

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
            total_sum = 0
            total_discount_sum = 0

            for item in message_data['responses']:
                if item['article_data']['found']:
                    bot_data = item['bot_data']
                    article_data = item['article_data']

                    item_total = bot_data['price'] * article_data['quantity']
                    item_discount = item_total * 0.97

                    total_sum += item_total
                    total_discount_sum += item_discount

                    stock_info = f" ({bot_data['stock_quantity']} —à—Ç.)" if bot_data['stock_quantity'] else ""

                    response_text += (
                        f"üîπ –ê—Ä—Ç–∏–∫—É–ª: {article_data['article']}\n"
                        f"üè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {bot_data['name'] or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
                        f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {article_data['quantity']}{stock_info}\n"
                        f"üí∞ –¶–µ–Ω–∞: {bot_data['price']:.2f} ‚ÇΩ/—à—Ç\n"
                        f"üßÆ –°—É–º–º–∞: {item_total:.2f} ‚ÇΩ\n"
                        f"üéÅ –°–æ —Å–∫–∏–¥–∫–æ–π 3%: {item_discount:.2f} ‚ÇΩ\n\n"
                    )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if total_sum > 0:
                response_text += (
                    f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_sum:.2f} ‚ÇΩ\n"
                    f"üí≥ –°–æ —Å–∫–∏–¥–∫–æ–π: {total_discount_sum:.2f} ‚ÇΩ\n"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
            await self.client.send_message(
                entity=self.private_channel,
                message=response_text,
                link_preview=False
            )

            print(f"‚úâÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª {self.private_channel.title}")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: {e}")

    def cleanup_processing(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.processing_active = False
        self.current_message_processing = None
        self.article_timeouts.clear()
        self.pending_responses.clear()

    async def monitor_output_channel(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞"""
        print("üëÇ –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞...")
        last_id = 0

        while True:
            try:
                history = await self.client(GetHistoryRequest(
                    peer=self.output_channel,
                    limit=5,
                    offset_id=0,
                    min_id=last_id
                ))

                if history.messages:
                    for msg in history.messages:
                        if msg.id > last_id and not msg.out:
                            await self.handle_output_channel_response(msg)
                            last_id = msg.id

                await asyncio.sleep(5)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞: {e}")
                await asyncio.sleep(10)

    async def process_messages(self, user, messages):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        new_messages = [msg for msg in messages if msg.id > self.last_checked_id]

        if not new_messages:
            return

        new_messages.sort(key=lambda x: x.id)
        messages_to_process = new_messages[-10:]

        for message in messages_to_process:
            if not message.message:
                continue

            print(f"\nüì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ (ID: {message.id})")
            self.message_queue.append({
                'message': message,
                'user': user
            })

        self.last_checked_id = max(msg.id for msg in messages_to_process)

    async def check_timeouts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
        while True:
            try:
                if self.processing_active and self.current_message_processing:
                    await self.check_complete_response()
                await asyncio.sleep(5)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤: {e}")
                await asyncio.sleep(10)


async def main():
    monitor = ChannelMonitor()
    await monitor.initialize()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        input_channel = await monitor.client.get_entity(config.CHANNEL_ID)
        user = await monitor.client.get_entity(config.USER_ID)

        print(f"\nüîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {input_channel.title}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name if user.first_name else user.username}\n")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        tasks = [
            asyncio.create_task(monitor.monitor_output_channel()),
            asyncio.create_task(monitor.check_timeouts()),
            asyncio.create_task(monitor.process_message_queue())
        ]

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        while True:
            try:
                history = await monitor.client(GetHistoryRequest(
                    peer=input_channel,
                    limit=100,
                    offset_id=0,
                    min_id=monitor.last_checked_id
                ))

                if history.messages:
                    await monitor.process_messages(user, history.messages)

                await asyncio.sleep(60)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(10)

    except Exception as e:
        print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await monitor.client.disconnect()
        print("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    print("üü¢ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")