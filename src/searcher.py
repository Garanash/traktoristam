import os
import openpyxl
import telebot
import urllib3
from urllib3.exceptions import InsecureRequestWarning

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –ø—Ä–æ–≤–µ—Ä–∫–µ SSL
urllib3.disable_warnings(InsecureRequestWarning)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8164754969:AAGOgO3oEccKdxbreCv9TpRiSw3Nby5qv04"
BASE_FILE_PATH = "files/base.xlsx"
PROXY_URL = None

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É files, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
if not os.path.exists("files"):
    os.makedirs("files")


def convert_xls_to_xlsx_if_needed():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç"""
    if not os.path.exists(BASE_FILE_PATH):
        xls_path = BASE_FILE_PATH.replace('.xlsx', '.xls')
        if os.path.exists(xls_path):
            try:
                import xlrd
                from openpyxl import Workbook

                wb_xls = xlrd.open_workbook(xls_path)
                sheet = wb_xls.sheet_by_index(0)
                wb_xlsx = Workbook()
                ws = wb_xlsx.active

                for row in range(sheet.nrows):
                    for col in range(sheet.ncols):
                        ws.cell(row=row + 1, column=col + 1).value = sheet.cell_value(row, col)

                wb_xlsx.save(BASE_FILE_PATH)
                print(f"–§–∞–π–ª {xls_path} —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {BASE_FILE_PATH}")
                return True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
                return False
    return False


def clean_article_column():
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ —Ñ–∞–π–ª–∞ Excel (–∞—Ä—Ç–∏–∫—É–ª—ã)"""
    try:
        if not os.path.exists(BASE_FILE_PATH):
            if not convert_xls_to_xlsx_if_needed():
                raise FileNotFoundError(f"–§–∞–π–ª {BASE_FILE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        workbook = openpyxl.load_workbook(BASE_FILE_PATH)
        sheet = workbook.active

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü (–∞—Ä—Ç–∏–∫—É–ª—ã)
        for row in sheet.iter_rows(min_col=2, max_col=2):
            for cell in row:
                if cell.value and isinstance(cell.value, str):
                    cell.value = cell.value.replace(" ", "")

        workbook.save(BASE_FILE_PATH)
        print("–ü—Ä–æ–±–µ–ª—ã –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ (–∞—Ä—Ç–∏–∫—É–ª—ã) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        raise


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN, skip_pending=True, threaded=False)


def format_price(price):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á"""
    try:
        return "{:,.2f}".format(float(price)).replace(",", "").replace(".", ",")
    except:
        return str(price)


def normalize_article(article):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∞—Ä—Ç–∏–∫—É–ª: —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É"""
    return article.replace(" ", "").strip().lower()


def search_in_base(article: str) -> dict:
    """–ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ –±–∞–∑–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
    try:
        if not os.path.exists(BASE_FILE_PATH):
            if not convert_xls_to_xlsx_if_needed():
                return {"error": "–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        workbook = openpyxl.load_workbook(BASE_FILE_PATH)
        sheet = workbook.active
        article = normalize_article(article)
        results = []

        for row in sheet.iter_rows(values_only=True):
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü (–∞—Ä—Ç–∏–∫—É–ª—ã)
            col2 = normalize_article(str(row[1])) if row[1] is not None else ""
            # –¢—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ) –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            col3 = str(row[2]) if row[2] is not None else ""

            # –ò—â–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º –∞—Ä—Ç–∏–∫—É–ª–µ (col2) –∏–ª–∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ (col3)
            if article in col2 or article in col3.lower().replace(" ", ""):
                item = {
                    "name": col3,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                    "price": format_price(row[3]) if len(row) > 3 and row[3] is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                    "quantity": str(row[4]) if len(row) > 4 and row[4] is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    "article": str(row[1]) if row[1] is not None else "–ù–µ —É–∫–∞–∑–∞–Ω"
                }
                results.append(item)

        if not results:
            return {"error": "–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        return {"results": results}

    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞: {str(e)}"}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    article = message.text.strip()
    search_result = search_in_base(article)

    if "error" in search_result:
        bot.send_message(message.chat.id, search_result["error"])
    else:
        for item in search_result["results"]:
            response = (
                f"üìå –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {item['name']}\n"
                f"üí∞ –¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: {item['price']} —Ä—É–±.\n"
                f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {item['quantity']}"
            )
            bot.send_message(message.chat.id, response)


if __name__ == "__main__":
    try:
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        clean_article_column()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–∏—Å–∫—É")
        bot.polling(none_stop=True, skip_pending=True)
        print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")